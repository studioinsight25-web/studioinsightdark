// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  reviews   Review[]
  wishlist  WishlistItem[]
  cartItems CartItem[]
  userDownloads UserDownload[]

  @@map("users")
}

model Product {
  id              String        @id @default(cuid())
  name            String
  description     String
  shortDescription String?
  price           Int           // Price in cents
  type            ProductType
  category        String?
  isActive        Boolean       @default(true)
  featured        Boolean       @default(false)
  comingSoon      Boolean       @default(false)
  sales           Int           @default(0)
  rating          Float         @default(0)
  imageUrl        String?
  imagePublicId   String?
  externalUrl     String?       // For affiliate links
  metaTitle       String?
  metaDescription String?
  
  // Course specific fields
  duration        String?
  level           String?
  students        String?
  lessons         String?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  orderItems      OrderItem[]
  reviews         Review[]
  digitalProducts DigitalProduct[]
  wishlistItems   WishlistItem[]
  cartItems       CartItem[]

  @@map("products")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  totalAmount Int         // Total amount in cents
  currency    String      @default("EUR")
  status      OrderStatus @default(PENDING)
  paymentId   String?
  paidAt      DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int     @default(1)
  price     Int     // Price at time of purchase in cents

  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("reviews")
}

model DigitalProduct {
  id          String   @id @default(cuid())
  productId   String
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  downloadLimit Int?   // Max downloads per user
  expiresAt   DateTime? // Expiration date
  createdAt   DateTime @default(now())

  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userDownloads UserDownload[]

  @@map("digital_products")
}

model UserDownload {
  id              String   @id @default(cuid())
  userId          String
  digitalProductId String
  downloadCount   Int      @default(0)
  lastDownloadedAt DateTime @default(now())
  createdAt       DateTime @default(now())

  // Relations
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  digitalProduct  DigitalProduct @relation(fields: [digitalProductId], references: [id], onDelete: Cascade)

  @@unique([userId, digitalProductId])
  @@map("user_downloads")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model DiscountCode {
  id          String   @id @default(cuid())
  code        String   @unique
  description String?
  type        DiscountType
  value       Int      // Percentage or fixed amount
  minAmount   Int?     // Minimum order amount
  maxUses     Int?     // Maximum number of uses
  usedCount   Int      @default(0)
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("discount_codes")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@map("cart_items")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum ProductType {
  COURSE
  EBOOK
  REVIEW
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  CANCELED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// Newsletter subscriptions
model NewsletterSubscription {
  id                 String   @id @default(cuid())
  email              String   @unique
  name               String?
  consent            Boolean  @default(true)
  status             String   @default("pending")
  confirmationToken  String?  @unique
  confirmedAt        DateTime?
  createdAt          DateTime @default(now())

  @@map("newsletter_subscriptions")
}