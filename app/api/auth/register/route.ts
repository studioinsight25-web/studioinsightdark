// app/api/auth/register/route.ts - Register API
import { NextRequest, NextResponse } from 'next/server'
import { z } from 'zod'
import { DatabaseService } from '@/lib/database-direct'
import bcrypt from 'bcryptjs'

const registerSchema = z.object({
  name: z.string().min(2, 'Naam moet minimaal 2 karakters bevatten'),
  email: z.string().email('Ongeldig e-mailadres'),
  password: z.string().min(6, 'Wachtwoord moet minimaal 6 karakters bevatten'),
  confirmPassword: z.string(),
}).refine((data) => data.password === data.confirmPassword, {
  message: "Wachtwoorden komen niet overeen",
  path: ["confirmPassword"],
})

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { name, email, password } = registerSchema.parse(body)

    console.log('üîç Attempting registration for:', email)

    // Check if user already exists
    const existingUser = await DatabaseService.query(
      'SELECT id FROM users WHERE email = $1',
      [email]
    )

    if (existingUser.length > 0) {
      console.log('‚ùå User already exists:', email)
      return NextResponse.json(
        { error: 'Er bestaat al een account met dit e-mailadres' },
        { status: 400 }
      )
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 12)

    // Create user in database (id is UUID, auto-generated by database)
    // Use gen_random_uuid() for PostgreSQL UUID generation
    const result = await DatabaseService.query(
      'INSERT INTO users (email, name, password, role, created_at, updated_at) VALUES ($1, $2, $3, $4, NOW(), NOW()) RETURNING id, email, name, role, created_at, updated_at',
      [email, name, hashedPassword, 'USER']
    )

    if (result.length === 0) {
      console.error('‚ùå Failed to create user')
      return NextResponse.json(
        { error: 'Gebruiker kon niet worden aangemaakt' },
        { status: 500 }
      )
    }

    const user = result[0]
    console.log('‚úÖ User created successfully:', user.email)

    return NextResponse.json({
      success: true,
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role
      }
    })

  } catch (error) {
    console.error('‚ùå Register error:', error)

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Validatiefout', details: error.issues },
        { status: 400 }
      )
    }

    // Check for duplicate user error
    if (error instanceof Error && error.message.includes('duplicate key')) {
      return NextResponse.json(
        { error: 'Er bestaat al een account met dit e-mailadres' },
        { status: 400 }
      )
    }

    return NextResponse.json(
      { error: 'Er is een fout opgetreden bij het aanmaken van je account' },
      { status: 500 }
    )
  }
}


